::::::::::::::
gen_meta_fldname.r
::::::::::::::
main{
    *srchtype="SOMESTR"
    *s=meta_query_fields(*srchtype)
    writeLine("stdout","[*s]")
    *srchtype="*typ"
    *s=meta_query_fields(*srchtype)
    writeLine("stdout","[*s]")
}
meta_query_fields(*obj_type) {
    
    *obj_field = ""
    foreach( *t in list("USER","DATA","COLL","RESC"))
    {
        if (*t == *obj_type) {
            *obj_field = *t
        }
    }
    *meta_fields = ""
    if (*obj_field != "") {
        foreach( *f in list("NAME,", "VALUE,", "UNITS,", "ID")) {
            *meta_fields = *meta_fields ++ ("META_" ++ *obj_field ++ "_ATTR_"  ++ *f )
        }
    }
    *meta_fields
}
input  *typ=$"RESC"
output ruleExecOut
::::::::::::::
enum_compound_children.r
::::::::::::::
maintest {
    find_compound_children (*inpId, *inpNm, *i,*n, *ctx)
    writeLine('stdout','i = *i ; n = *n ; ctx = *ctx')
}
#                                i        i       o    o   i '' or 'ch' or "cache" or "archive"
find_compound_children (*idcld , *nmcld, *id, *nm, *cx) 
{
  *cx=list()
  *id=list()
  *nm=list()
  *ptemp = ''

  if (*nmcld != '') {
      foreach (*p in select RESC_NAME,RESC_PARENT where RESC_NAME = '*nmcld') { *ptemp = *p.RESC_PARENT }
  }
  if (*ptemp == '' && *idcld != '') {
      foreach (*p in select RESC_ID,RESC_PARENT where RESC_ID = '*idcld') { *ptemp = *p.RESC_PARENT }
  }
  *parent = ''
  if (*ptemp != '') {
     foreach (*q in select RESC_ID,RESC_NAME where RESC_TYPE_NAME = 'compound') { 
#       # 4.2
        if (*q.RESC_ID == "*ptemp") {*parent = "*ptemp"}
#       # 4.1
#       #if (*p.RESC_NAME == *ptemp) {*parent = *ptemp}
     }
  }

   if (*parent != '') {
      foreach (*r in  select RESC_ID,RESC_NAME,RESC_PARENT_CONTEXT where RESC_PARENT = '*parent') {
         *cx = cons(*r.RESC_PARENT_CONTEXT,*cx)
         *id = cons(*r.RESC_ID , *id)
         *nm = cons(*r.RESC_NAME , *nm)
      }
   }
   *parent
}

input *inpNm=$'',*inpId=$''
output ruleExecOut
::::::::::::::
find_compound_parent_42.r
::::::::::::::
maintest {
    *idx = find_compound_sibling (*inpId, *inpNm, *i,*n, *rol)
    *sz = size(*i)
    writeLine("stdout","ids = *i ; names = *n; idx = *idx")
}
#                                i        i       o    o   i '' or 'ch' or "cache" or "archive"
find_compound_sibling (*idcld , *nmcld, *id, *nm, *role)
 # *idcld optional INPUT overrides *nmcld
 # *nmcld INPUT name of child
 # *id, *nm output lists
 # *role INPUT '', 'ch', 'archive', 'cache'
 # *role OUTPUT "0" or "1" depending on index of Cache in *id and *nm
{
    *found = -1; *parent=0
    *id = list()
    *nm = list()
    if (*idcld != '') {
        foreach (*v in select RESC_NAME,RESC_PARENT where RESC_ID = '*idcld') {
            *nmcld = *v.RESC_NAME
        }
    }
    if (*parent) {
         
    }
    0
    succeed
    # 4.1 will require extra indirection, to get ID from PARENT
    if (*nmcld != '') {
        foreach (*s in select RESC_ID,RESC_NAME,RESC_PARENT_CONTEXT 
                  where RESC_NAME = '*nmcld' and RESC_PARENT_CONTEXT like '%*role%') 
        {
            *id = cons("*s.RESC_ID",*id)
            *nm = cons(*s.RESC_NAME,*nm)
            if (*s.RESC_PARENT_CONTEXT == 'cache') { *found = size(*id)-1 }
        }
    }
    *found
}

input *inpNm=$'',*inpId=$'',*rol=$'archive'
output ruleExecOut
::::::::::::::
launch_it.r
::::::::::::::
f{test}

test{
  delay ( *delay ++ *repeat ) { prune_cache ; writeLine("serverLog","*logString") }
}
input *delay=$"<PLUSET>60s</PLUSET>",*repeat=$"<EF>60s</EF>",*logString=$' ++++ any string ++++'
output ruleExecOut
::::::::::::::
kvp_lookup_w_default.r
::::::::::::::
main {
        test
}

test {
  msiString2KeyValPair(*initkv, *kvp)
  KVP_lookup_with_default(*kvp,*key,*v,"null")
  writeLine("stdout","\t: [*v]")
}

KVP_lookup_with_default(*kvPairs, *key, *val, *default)
{
  *val = *default
  *found = 0
  *k=""
  foreach (*k in *kvPairs) { 
    if (*k == *key) {*val = *kvPairs.*key; *found=1; break}
  }
  *found
}


input  *initkv=$'a=b%c=d',*key=$'c'
output ruleExecOut
::::::::::::::
remove_avus.r
::::::::::::::
main{
# remove AVUS with matching *key from data object at *objpath
#
#                                         *match is "like" for like comparison
#                                         *match is "" for equality comparison
  remove_AVUs_matching_key(*objpath, *key, *match)
}

remove_AVUs_matching_key(*dobjPath,*Key, *matchType)
{
    msiSplitPath(*dobjPath,*dobjColl,*dobjName)
    *keylist = list()
    *vallist = list()
    foreach (*x in select META_DATA_ATTR_NAME , META_DATA_ATTR_VALUE
              where COLL_NAME = '*dobjColl' and DATA_NAME = '*dobjName')
    {
        *name = *x.META_DATA_ATTR_NAME
        *value = *x.META_DATA_ATTR_VALUE
        if (*matchType == 'like') {
            if (*name like *Key ) {
                *keylist = cons(*name ,*keylist)
                *vallist = cons(*value,*vallist)
            }
        }
        else {
            if (*name == *Key ) {
                *vallist = cons(*value,*vallist)
            }
        }
    }
    *nVal = size(*vallist) 
    writeLine("stdout","removing:")
    for (*i = 0; *i < *nVal ; *i = *i+1) {
        *v = elem(*vallist,*i)
        if (*matchType == 'like') {
          *Key = elem(*keylist,*i)
        }
        msiString2KeyValPair("*Key=*v",*k )
        writeLine("stdout","*Key *v")
        msiRemoveKeyValuePairsFromObj(*k,"*dobjPath","-d")
    }
}

input *objpath=$"/tempZone/home/rods/VERSION.json", *key=$"x", *match=$"like"
output ruleExecOut
::::::::::::::
revlist.r
::::::::::::::
maintest
{ 
  *m = reverse_list( list("3","2","1","0") )
  *e = list_get (*m,-2)
  writeLine ("stdout","reversed list [*m] - next to last is  [*e]")
}

list_get(*L, *i) 
{
  if (*i < 0) { *i = size(*L) + *i }
  elem(*L,*i)
}

reverse_list(*L) 
{
  *s=size(*L)
  *M=list()
  for (*i=0; *i<*s; *i = *i + 1) { *M=cons(elem(*L,*i),*M) }
  *M
}

input null
output ruleExecOut
::::::::::::::
root_in_resc_hier.r
::::::::::::::
main{
  *root_resc = root_in_resc_hier(*hierstring)
  writeLine("stdout","extracted root of hier -> [*root_resc]")
  #compound_hier_root_lookup(*m)
  foreach (*rescname in *m) {
      *rootresc = *rescname
      writeLine("stderr"," compound - [*rescname] ;" ++ " root is - [*rootresc] ")
  }
}

root_in_resc_hier(*h)
{
  *r = *h
  *t = triml(*h,';')
  if (*t != *h) {
    msiStrlen(*h, *hl) 
    msiStrlen(*t, *tl) 
    msiSubstr(*h,"0",str(int(*hl)-int(*tl)-1),*r)
  }
*r
}

INPUT *hierstring=$"pt1;cmp;cch"
OUTPUT ruleExecOut
::::::::::::::
set_meta_on_resc.r
::::::::::::::
main { test_main }

set_and_check_resc_meta: input string * input string * input string * output string * input string -> integer

test_main {
    *check = ""; *s = 0
    if (*resc_name != '') {

        *s = set_and_check_resc_meta(*resc_name,*k,*v,*check,"*guard")

        if (*s >= 1) { writeLine("stdout","success: [*k] -> [*v] set on resc=[*resc_name].") }
        else if (*s == 0) {
            writeLine("stdout","failure due to guard conflict")
        }
        else if (*s == -1) {
            writeLine("stdout","failure, contention or multiple values on setting metadata")
        }
        else  {
            *t = -(*s)
            writeLine("stdout", "too many kvpairs (*t)\nHint: someone is using " ++
                                "msiAssociateKeyValuePairsToObj(...)")
        }
    }
}

set_and_check_resc_meta(*resc,*key,*value,*retrieved, *guardstring)
{
    *vallist = list()
    foreach (*x in select META_RESC_ATTR_VALUE,META_RESC_ATTR_NAME,RESC_NAME
                    where META_RESC_ATTR_NAME = '*key' and RESC_NAME = '*resc')
    {
        *vallist = cons(*x.META_RESC_ATTR_VALUE, *vallist)
    }
    *listsize = size(*vallist)
    #=============
    *success = 1
    if (*listsize > 1) {
        *success = (0 - *listsize)
    }
    else {
        *match = false
        if (*listsize == 1 && *guardstring != "") {
            *preexist = elem(*vallist,0)
            *match = false
            if (*guardstring like '^*') {
                *match = (*preexist like regex *guardstring)
            } else {
                *match = (*preexist like *guardstring)
            }
        }
        if (*match) {
            writeLine("stdout","preexist = [] ; guardstring = [*guardstring]")
            *success = 0
        } else {
            msiString2KeyValPair("*key=*value",*kvp)
            msiSetKeyValuePairsToObj(*kvp,"*resc","-R")
        }
    }
    #=============
    if (*success == 1) {
        *tries = 0
        foreach (*x in select META_RESC_ATTR_VALUE,META_RESC_ATTR_NAME,RESC_NAME
         where META_RESC_ATTR_NAME = '*key' and RESC_NAME = '*resc')
        {
            *tries = *tries + 1
            if (*tries == 1) {
               *retrieved = *x.META_RESC_ATTR_VALUE
               if (*value != *retrieved) { *success = -1  }  # contention
            }
            else {
               *success = -1 # if (*success > 0) { *success = *tries } # uncomment  to detect multiple matches
            }
        }
    }
*success  # -- 1 indicates success ; any other return value conveys possible error condition
}

input *resc_name=$'pt1', *k=$'aa', *v=$'bb', *guard=$''
output ruleExecOut
::::::::::::::
sync.r
::::::::::::::
main {
  *r=""; 
  *n="";
  test (*dpath,*rescRoot,*r,*n)
}
test (*dp, *r,  *role, *nfound ) {
    msiSplitPath(*dp,*C,*D)
    *Did = ""
    *hierlist = list()
    foreach (*p in select DATA_NAME,COLL_NAME,RESC_HIER where
     RESC_HIER like '*rescRoot;%' and DATA_NAME = "*D" and COLL_NAME = '*C')
    {
         *Did = *p.DATA_ID
         *hierlist = cons(*p.RESC_HIER, *hierlist)
    }
    if (*debug != '') { writeLine("stdout","results of query = ") }
    writeLine("stdout"," did = *Did , Hier list = *hierlist " )
    msisync_to_archive("*CacheRescName","*P","*C/*D" );
    *hierlist
}
input  *dpath='',*debug='0'
output ruleExecOut
::::::::::::::
trace_hierarchy.r
::::::::::::::
testmain {

   *l = irf_trace_hierarchy(*cchname,*m,*h)
   writeLine("stdout","*h")
   if (*syncObj == '')  {
       *irodsvsn = IRodsVersion
       writeLine("stdout", "test irods vsn value = " ++ str(*irodsvsn) )
       writeLine("stdout", "test irods vsn type =  " ++ type(*irodsvsn) )
   }
   else {

       msiSplitPath(*syncObj,*coll,*basen)

       *P = ''

       foreach (*x in select DATA_PATH,DATA_NAME,COLL_NAME,DATA_REPL_NUM where DATA_RESC_HIER = '*h' 
                              and COLL_NAME = '*coll' and DATA_NAME = '*basen')
       {
           *P=*x.DATA_PATH
           *C=*x.COLL_NAME
           *D=*x.DATA_NAME
           writeLine("stdout","repl_num = " ++ *x.DATA_REPL_NUM ++ " - *C/*D on [*h]" )
       }

       if (*P != '' && *doSync != 0) {
         *sync_status = msisync_to_archive("*h", "*P", "*C/*D")
         writeLine("stdout","--- sync status = [*sync_status]")
           if (*sync_status == 0 && *doSync > 1) {
             *trimStatus = -999
             *cache_replnum = ''
#            # -- get cache repl_num for trim
             foreach (*getrepl in select DATA_REPL_NUM
                               where DATA_NAME = '*D' and COLL_NAME = '*C'
                               and DATA_RESC_NAME = '*cchname')
             {
               *cache_replnum = *getrepl.DATA_REPL_NUM
             }
             if (*cache_replnum != '') {
               writeLine("stdout","TRIM repl from CACHE: number is " ++ "*cache_replnum")
               msiDataObjTrim('*C/*D','null','*cache_replnum','1','1',*trim_status)
               writeLine("stdout","--- trim status = [*trim_status]")
             }
           }
       } else {
         writeLine("stdout","skipping ...")
       }
   }
}

irf_trace_hierarchy (*cname,*map,*hier)
{
  msiString2KeyValPair( "", *parent)
  msiString2KeyValPair( "", *id2n )
  msiString2KeyValPair( "", *n2id )
  msiString2KeyValPair( "", *map )

  foreach (*y in select RESC_NAME,RESC_ID,RESC_PARENT) {
     *name = *y.RESC_NAME
     *parent.*name = *y.RESC_PARENT
     *idnum = *y.RESC_ID
     *id2n.*idnum = *name
     *n2id.*name = *idnum
  }

  foreach (*z  in *parent ) {
      *tmp = *parent.*z  # __ in irods <= 41 this is a resource name,
      *nm = *tmp         #    but in irods >= 42 it's a numeric ID
      if (IRodsVersion() >= 42 && *tmp != "") { *nm = *id2n.*tmp }
      *map.*z = *nm
  }

  *lst = list()
  *hier = ""
  *p ="*cname"
  while(*p != "") {
      if (*hier == "") { *hier = *p }
      else { *hier = *p ++ ";" ++ *hier }
      *id = *n2id.*p
      *lst = cons(*id,*lst)
      *p = *map.*p
  }

*lst
}

IRodsVersion() { *vsn }

# try with args "*cchname='$RNAME'" "*vsn=41" "*syncObj='/tempZone/home/rods/myfile'"

input *cchname=$'',*vsn=$42, *syncObj=$'', *doSync=$0
output ruleExecOut

::::::::::::::
trimstrings.r
::::::::::::::
maintest
{
  foreach (*hier in split (*rescHier,'/')) 
  {
    *hier = trim_surrounding_whitespace(*hier)
    *n = top_or_next_lowest_in_resc_hier (*hier)
    writeLine("stdout","top or next lowest node in [*hier] : *n")
  }
}

trim_trailing_whitespace(*strg) 
{
    msiStrlen(*strg,*ln)
    *ln = int(*ln)
    *s = ""
    if (*ln > 0) { msiSubstr(*strg,str(*ln-1),"1",*s) }
    while (*ln > 0 && (*s == "\t" || *s == " " || *s == "\n")) {
      *ln = *ln - 1
      # chop off last character and get new last character
      msiStrchop(*strg,*tmp) 
      *strg = *tmp
      if (*ln > 0) {msiSubstr(*strg,str(*ln-1),"1",*s)} else {*s = ""}
    }
*strg
}

trim_leading_whitespace(*strg) 
{
    msiStrlen(*strg,*ln)
    *ln = int(*ln)
    *s = ""
    if (*ln > 0) { msiSubstr(*strg,"0","1",*s) }
    while (*ln > 0 && (*s == "\t" || *s == " " || *s == "\n")) {
      *ln = *ln - 1
      # chop off first character and get new first character
      msiSubstr(*strg, "1", str(*ln), *tmp)
      if (*ln > 0) { msiSubstr(*tmp,"0","1",*s) } else { *s="" }
      *strg = *tmp
    }
*strg
}

trim_surrounding_whitespace(*strg) {
  trim_leading_whitespace( trim_trailing_whitespace( *strg ))
}

top_or_next_lowest_in_resc_hier(*hier_string) 
{
  *getL = trimr(*hier_string,";")
  *getR = triml(*getL,";") # here, if getL = getR then root is only element left
  while (*getR != *getL) { # if getR has ';', peel off left elements
    *getL = *getR
    *getR = triml(*getR,";")
  }
*getR # retval
}

input *rescHier=$'  root;cmp;cch / root;a;cmp2;arc2  / cmp3;cch3 / root '
output ruleExecOut
::::::::::::::
unused.r
::::::::::::::
sleepMilliseconds(*ms) {
   if (*ms < 0.0) { *ms = 0.000; }
   *s = (*ms / 1000.0)
   *s_integer  = int(floor(*s) + 0.01)
   *s_fraction = (*ms - double(*s_integer * 1000.0))/1000.0
   *i = str(*s_integer)
   *u = str(*s_fraction * 1000000.0)
   *retv = msiSleep (*i, *u)
}

doubleToThreshold(*ms,*thresh_ms,*sleep) 
{
  if (*thresh_ms<0) {*thresh_ms = 0} 
  *y = *ms * 2.0 + 0.001;
  if (*sleep) {sleepMilliseconds(*ms)}
  if (*y > *thresh_ms) { *y = double(*thresh_ms) }
  *ms = *y
}

unset_All_meta_on_compound_resc (*resc_name)
{
    msiString2KeyValPair("",*kvp)
    foreach (*rm in select META_RESC_ATTR_NAME, META_RESC_ATTR_VALUE
     where RESC_NAME = '*resc_name' and RESC_TYPE_NAME = 'compound')
    {
        *Key = *rm.META_RESC_ATTR_NAME
        *kvp.*Key = *rm.META_RESC_ATTR_VALUE
    }
    *x = errorcode(msiRemoveKeyValuePairsFromObj( *kvp, *resc_name, "-R"))
*x==0;
}
::::::::::::::
cmu.r
::::::::::::::
main { 

    *parentname = find_compound_parent_and_leaf_roles (*rescn , (*isleaf != 0), *lookup)
    writeLine("stdout", "parent name = *parentname")
    writeLine("stdout", "lookup      = [*lookup]")

}

IRodsVersion { 43 }

find_compound_parent_and_leaf_roles(*inpName, *isLeaf, *leaf_lookup)
{
    if (IRodsVersion >= 42)  then  find_compound_parent_and_leaf_roles_42(*inpName,*isLeaf,*leaf_lookup)
                             else  find_compound_parent_and_leaf_roles_41(*inpName,*isLeaf,*leaf_lookup)
}


find_compound_parent_and_leaf_roles_42(*inpName, *isLeaf, *leaf_lookup)
{
    writeLine("stdout","***42")

    msiString2KeyValPair("",*idmap)

    foreach (*r in select RESC_ID,RESC_NAME where RESC_TYPE_NAME = 'compound') {
        *id = *r.RESC_ID
        *idmap.*id = *r.RESC_NAME
    }

    *par = ""
    foreach (*r in select RESC_NAME, RESC_PARENT_CONTEXT, RESC_PARENT
               where RESC_PARENT_CONTEXT = 'cache' || = 'archive') 
    {
        *nm=""
        foreach (*try in *idmap) {
            if (*r.RESC_PARENT == *try) { *nm = *idmap.*try }
        }
        if (*nm != "") {
            *par = *nm
            *ctx = *r.RESC_PARENT_CONTEXT
            *leaf_lookup.*ctx = *r.RESC_NAME
        }
    }
*par;
}

find_compound_parent_and_leaf_roles_41(*inpName, *isLeaf, *leaf_lookup)
{
    *par=""
    *strg=""
    if (!*isLeaf) {
        foreach (*x in select RESC_NAME,RESC_CHILDREN where RESC_TYPE_NAME = 'compound') {
            if (*x.RESC_NAME == '*inpName') { 
                *par = '*inpName'; *strg = *x.RESC_CHILDREN
            }
        }
    }
    else {
        foreach (*x in select RESC_NAME,RESC_CHILDREN where RESC_TYPE_NAME = 'compound') {
            *y=*x.RESC_NAME
            *z=*x.RESC_CHILDREN
            if (*z like '*inpName{*' || *z like '*;*inpName{*')      #--lol--}}
            {
                 *par = *y
                 *strg = *z
            }
        }
    }
    foreach (*s in split(*strg,";")) {
        *t = ""
        if (*s like "*{cache}*") {*t = "cache"}     # *sib keys are "cache","archive"
        if (*s like "*{archive}*") {*t = "archive"}
        if (*t != "") {
            *parsed = split(*s,"{")
            *leaf_lookup.*t = elem(*parsed,0)              # *sib values are leaf names
        }
    }
    *par
}

input *rescn=$"",*isleaf=$0
output ruleExecOut
::::::::::::::
buildmap.r
::::::::::::::
testmain {

    build_root_lookup(*m)

    foreach (*n in *m) {
        *rt = *m.*n
        writeLine("stderr", "compound [*n] has root: [*rt]")
    }

}

build_root_lookup(*map)
{
  msiString2KeyValPair("",*map)
  foreach (*c in select RESC_TYPE_NAME,RESC_NAME where RESC_TYPE_NAME = 'compound')
  {
      *n = *c.RESC_NAME
      trace_hier(*n,*m11,*p)
      *map.*n = root_in_resc_hier(*p)
      writeLine("stderr"," compound - *n ")
  }
}


# -- copied in, nominally changed: -- dwm--
root_in_resc_hier(*h)
{
  *r = *h
  *t = triml(*h,';')
  if (*t != *h) {
    msiStrlen(*h, *hl) 
    msiStrlen(*t, *tl) 
    msiSubstr(*h,"0",str(int(*hl)-int(*tl)-1),*r)
  }
*r
}

# -- this is for iRODS 4.1:
trace_hier(*cname,*map,*hier) {
  msiString2KeyValPair( "", *lin )
  msiString2KeyValPair( "", *par)
  msiString2KeyValPair( "", *id2n )
  msiString2KeyValPair( "", *n2id )
  msiString2KeyValPair( "", *map )
  foreach (*y in select RESC_NAME,RESC_ID,RESC_PARENT) {
     *name = *y.RESC_NAME
     *parent = *y.RESC_PARENT
     *idnum = *y.RESC_ID
     *lin."*name" = "*parent"
     *id2n."id_*idnum" = *name
     *n2id."*name" = "*idnum"
     *par.*name = *parent
  }

  ## writeLine("stderr", "par = *par")
  ## writeLine("stderr", "\n----------id2n:")
  foreach (*z  in *id2n ) {
    *nam = *id2n."*z"
    ## writeLine ("stderr", "*z -> *nam ")
  }

  ## == convert ; par holds id, not name , if vsn >= 42

  ##writeLine("stderr", "----------(par->map):")
  foreach (*z  in *par ) {
      *hold = *par.*z
      *nm = *hold
      *map.*z = *nm
  }

   *lst = list()
   *hier = ""
   *p ="*cname"
   while(*p != "") {
       if (*hier == "") { *hier = *p }
       else { *hier = *p ++ ";" ++ *hier }
       *id = *n2id.*p
       *lst = cons(*id,*lst)
       *p = *map.*p
   }
   *lst
}

INPUT  null
OUTPUT ruleExecOut
::::::::::::::
set_meta_on_compound_resource.r
::::::::::::::
main{
     *status = true
     if (!set_meta_on_compound_resc(*comp_resc_name, *k, *value))
     {
         *status = false
         unset_meta_on_compound_resc(*comp_resc_name, *k )
     }
     writeLine("stdout", "status of set = [*status]" )
     if (*sleep_secs_after_set_meta > 0) { writeLine("stdout", "sleeping...")
                                           msiSleep("*sleep_secs_after_set_meta","0") }
     if (*status) { unset_meta_on_compound_resc( *comp_resc_name,*k) }
}

#==================================================
# unset_All_meta_on_compound_resc( *resc_name )
# {
#     msiString2KeyValPair("",*kvp)
#     foreach (*rm in select META_RESC_ATTR_NAME, META_RESC_ATTR_VALUE
#      where RESC_NAME = '*resc_name' and RESC_TYPE_NAME = 'compound')
#     {
#         *Key = *rm.META_RESC_ATTR_NAME
#         *kvp.*Key = *rm.META_RESC_ATTR_VALUE
#     }
#     *x = errorcode(msiRemoveKeyValuePairsFromObj( *kvp, *resc_name, "-R"))
# *x==0;
# }
#==================================================
# unset_meta_on_compound_resc( *resc_name, *kvp ) 
# {
#     *x = errorcode(msiRemoveKeyValuePairsFromObj( *kvp, *resc_name, "-R"))
#     if (*x == 0) { msiString2KeyValPair("",*kvp) }
# }
# 
# set_meta_on_compound_resc ( *resc_name, *kvp, *set_value )
# {
#    *match = false
#    *Key = "irods_cache::reserve_resc"
# 
#    *rescN = ""
#    foreach (*x in select RESC_NAME, RESC_TYPE_NAME 
#             where RESC_NAME = '*resc_name' and RESC_TYPE_NAME = 'compound') 
#    {
#        *rescN = *x.RESC_NAME
#    }
# 
#    if (*rescN != "") {
#      *kvp."*Key" = "*set_value"
#      msiAssociateKeyValuePairsToObj( *kvp, *rescN, "-R")
#    }
# 
#    *equal = ""       # - must be nonzero length for successful set
#    *unequal = list() # - for colliding keys
#    foreach (*x in select RESC_NAME, META_RESC_ATTR_VALUE 
#             where META_RESC_ATTR_NAME =  '*Key' and RESC_NAME = '*resc_name' )
#    {
#        if (*set_value == *x.META_RESC_ATTR_VALUE) {
#            *match = true
#        }
#        else {
#            *unequal = cons( *x.META_RESC_ATTR_VALUE, *unequal)
#        }
#    }
#    if (!*match) { msiString2KeyValPair("",*kvp) }
#    # return : bool value  (successful set without collision)
#    *match && size(*unequal) < 1
# }

input *comp_resc_name=$'cmp10', *sleep_secs_after_set_meta=$0, *value=$'immediate'
output ruleExecOut

::::::::::::::
set_assoc_remove.r
::::::::::::::
main { 
  if (*objectPath != '') { testp(*objectPath) }
}

testp(*name) 
{
    #msiSplitPath(*name,*coll,*data)
    msiString2KeyValPair("*ma",*ka)
    msiString2KeyValPair("*ms",*ks)
    msiString2KeyValPair("*mr",*kr)
    *c='.';*j=0
    for(*i=0;*c!="";*i=*i+1) {
      msiSubstr(*debug,str(*i),"1",*c);
      if (*c == "a") {
          msiAssociateKeyValuePairsToObj(*ka,"*name","*otype")
      }
      else if (*c == "s") {
          msiSetKeyValuePairsToObj(*ks,"*name","*otype")
      }
      else if (*c == "r") {
          msiRemoveKeyValuePairsFromObj(*kr,"*name","*otype")
      }
    }
    #msiSubstr($debug,*x,1,*y)
}

input *objectPath=$'/tempZone/home/rods/dude1.r', *ma=$'',*ms=$'',*mr=$'', *debug='asr', *otype='-d'
output ruleExecOut
